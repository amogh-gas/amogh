<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:sec="http://www.springframework.org/schema/security" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->

	

	<!-- <context:property-placeholder location="classpath:application.properties"/>
 -->
	<import resource="classpath:amogh-service-config.xml" />
	<import resource="classpath:amogh-database-config.xml" />
		<bean id="filterChainProxy" class="org.springframework.security.web.FilterChainProxy">
		<sec:filter-chain-map>
			<sec:filter-chain pattern="/**"
				filters="csrfFilter,securityContextPersistenceFilter,j2eePreAuthenticatedProcessingFilter,logoutFilter,exceptionTranslationFilter" />

		</sec:filter-chain-map>
	</bean>
	
	<!--
		CSRF protection. Here we only include the CsrfFilter instead of all of Spring Security.
		See http://docs.spring.io/spring-security/site/docs/3.2.x/reference/htmlsingle/#csrf for more information on
		Spring Security's CSRF protection
	-->
	<bean id="csrfFilter" class="org.springframework.security.web.csrf.CsrfFilter">
		<constructor-arg>
			<bean class="org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository"/>
		</constructor-arg>
	</bean>
	<!--
		Provides automatic CSRF token inclusion when using Spring MVC Form tags or Thymeleaf. See
		http://localhost:8080/#forms and form.jsp for examples
	-->
	<bean id="requestDataValueProcessor" class="org.springframework.security.web.servlet.support.csrf.CsrfRequestDataValueProcessor"/>

	<bean id="securityContextPersistenceFilter"
		class="org.springframework.security.web.context.SecurityContextPersistenceFilter" />

	<sec:authentication-manager alias="authenticationManager">
		<sec:authentication-provider ref='preAuthenticatedAuthenticationProvider' />
	</sec:authentication-manager>

	<bean id="preAuthenticatedAuthenticationProvider"
		class="org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider">
		<property name="preAuthenticatedUserDetailsService" ref="preAuthenticatedUserDetailsService" />
	</bean>


	<bean id="userDetails"
		class="org.mahesh.samples.mvc.security.domain.WebUserDetails"
		scope="prototype" />

	<bean id="preAuthenticatedUserDetailsService"
		class="org.mahesh.samples.mvc.security.AMOGHGrantedAuthoritiesUserDetailsService" />

	<!-- Use 'X509AuthenticationFilter' when clientCert authentication is considered -->
	<bean id="j2eePreAuthenticatedProcessingFilter"
		class="org.springframework.security.web.authentication.preauth.j2ee.J2eePreAuthenticatedProcessingFilter">
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="authenticationDetailsSource">
			<bean
				class="org.springframework.security.web.authentication.preauth.j2ee.J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource">
				<property name="mappableRolesRetriever">
					<bean
						class="org.springframework.security.web.authentication.preauth.j2ee.WebXmlMappableAttributesRetriever" />
				</property>
				<property name="userRoles2GrantedAuthoritiesMapper">
					<bean
						class="org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper">
						<property name="convertAttributeToUpperCase" value="true" />
					</bean>
				</property>
			</bean>
		</property>
	</bean>

	<bean id="preAuthenticatedProcessingFilterEntryPoint"
		class="org.springframework.security.web.authentication.Http403ForbiddenEntryPoint" />

	<bean id="logoutFilter"
		class="org.springframework.security.web.authentication.logout.LogoutFilter">
		<constructor-arg index="0"
			value="/user/home.do?Logout=true" />
		<constructor-arg index="1">
			<list>
				<bean
					class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler">
					<property name="invalidateHttpSession" value="true" />
				</bean>
			</list>
		</constructor-arg>
	</bean>

	<bean id="exceptionTranslationFilter"
		class="org.springframework.security.web.access.ExceptionTranslationFilter">
		<property name="authenticationEntryPoint" ref="preAuthenticatedProcessingFilterEntryPoint" />
	</bean>

	<bean id="httpRequestAccessDecisionManager"
		class="org.springframework.security.access.vote.AffirmativeBased">
		<property name="allowIfAllAbstainDecisions" value="false" />
		<property name="decisionVoters">
			<list>
				<ref bean="roleVoter" />
			</list>
		</property>
	</bean>

	<!-- <bean id="filterSecurityInterceptor" -->
	<!-- class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor"> -->
	<!-- <property name="authenticationManager" ref="authenticationManager" 
		/> -->
	<!-- <property name="accessDecisionManager" ref="httpRequestAccessDecisionManager" 
		/> -->
	<!-- <property name="securityMetadataSource"> -->
	<!-- <sec:filter-invocation-definition-source> -->
	<!-- <sec:intercept-url pattern="/**" access="ROLE_X,ROLE_Y" /> -->
	<!-- </sec:filter-invocation-definition-source> -->
	<!-- </property> -->
	<!-- </bean> -->

	<bean id="roleVoter" class="org.springframework.security.access.vote.RoleVoter" />

	<bean id="securityContextHolderAwareRequestFilter"
		class="org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter" />

	<!-- Adds to avoid No visible WebSecurityExpressionHandler instance -->
	<bean id="webexpressionHandler"
		class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler" />

	<bean id="pAmoghSecurityInstance" class="org.springframework.core.io.ClassPathResource">
		<constructor-arg>
			<value>/security/AMOGHSecurityMapping.xml</value>
		</constructor-arg>
	</bean>

	<bean id="pAmoghSecuritySchema" class="org.springframework.core.io.ClassPathResource">
		<constructor-arg>
			<value>/security/AMOGHSecurityMapping.xsd</value>
		</constructor-arg>
	</bean>

	<bean
		class="org.mahesh.samples.mvc.security.AMOGHGlobalSecurityContextLoader"
		init-method="init">
		<constructor-arg>
			<ref bean="pAmoghSecurityInstance" />
		</constructor-arg>
		<constructor-arg>
			<ref bean="pAmoghSecuritySchema" />
		</constructor-arg>
	</bean>
</beans>
